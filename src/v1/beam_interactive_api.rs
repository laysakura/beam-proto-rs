// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc 3.21.5
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `org/apache/beam/model/interactive/v1/beam_interactive_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.interactive.v1.TestStreamFileHeader)
pub struct TestStreamFileHeader {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.interactive.v1.TestStreamFileHeader.tag)
    pub tag: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.interactive.v1.TestStreamFileHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestStreamFileHeader {
    fn default() -> &'a TestStreamFileHeader {
        <TestStreamFileHeader as ::protobuf::Message>::default_instance()
    }
}

impl TestStreamFileHeader {
    pub fn new() -> TestStreamFileHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag",
            |m: &TestStreamFileHeader| { &m.tag },
            |m: &mut TestStreamFileHeader| { &mut m.tag },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestStreamFileHeader>(
            "TestStreamFileHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestStreamFileHeader {
    const NAME: &'static str = "TestStreamFileHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tag = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tag);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tag.is_empty() {
            os.write_string(1, &self.tag)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestStreamFileHeader {
        TestStreamFileHeader::new()
    }

    fn clear(&mut self) {
        self.tag.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestStreamFileHeader {
        static instance: TestStreamFileHeader = TestStreamFileHeader {
            tag: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestStreamFileHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestStreamFileHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestStreamFileHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestStreamFileHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.interactive.v1.TestStreamFileRecord)
pub struct TestStreamFileRecord {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.interactive.v1.TestStreamFileRecord.recorded_event)
    pub recorded_event: ::protobuf::MessageField<super::beam_runner_api::test_stream_payload::Event>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.interactive.v1.TestStreamFileRecord.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestStreamFileRecord {
    fn default() -> &'a TestStreamFileRecord {
        <TestStreamFileRecord as ::protobuf::Message>::default_instance()
    }
}

impl TestStreamFileRecord {
    pub fn new() -> TestStreamFileRecord {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::beam_runner_api::test_stream_payload::Event>(
            "recorded_event",
            |m: &TestStreamFileRecord| { &m.recorded_event },
            |m: &mut TestStreamFileRecord| { &mut m.recorded_event },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestStreamFileRecord>(
            "TestStreamFileRecord",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestStreamFileRecord {
    const NAME: &'static str = "TestStreamFileRecord";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.recorded_event)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recorded_event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.recorded_event.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestStreamFileRecord {
        TestStreamFileRecord::new()
    }

    fn clear(&mut self) {
        self.recorded_event.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestStreamFileRecord {
        static instance: TestStreamFileRecord = TestStreamFileRecord {
            recorded_event: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestStreamFileRecord {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestStreamFileRecord").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestStreamFileRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestStreamFileRecord {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n?org/apache/beam/model/interactive/v1/beam_interactive_api.proto\x12$o\
    rg.apache.beam.model.interactive.v1\x1a7org/apache/beam/model/pipeline/v\
    1/beam_runner_api.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"(\n\x14T\
    estStreamFileHeader\x12\x10\n\x03tag\x18\x01\x20\x01(\tR\x03tag\"y\n\x14\
    TestStreamFileRecord\x12a\n\x0erecorded_event\x18\x01\x20\x01(\x0b2:.org\
    .apache.beam.model.pipeline.v1.TestStreamPayload.EventR\rrecordedEventBF\
    \n$org.apache.beam.model.interactive.v1B\x0eInteractiveApiZ\x0einteracti\
    ve_v1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::beam_runner_api::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(TestStreamFileHeader::generated_message_descriptor_data());
            messages.push(TestStreamFileRecord::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
