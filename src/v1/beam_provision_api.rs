// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc 3.21.5
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `org/apache/beam/model/fn_execution/v1/beam_provision_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.fn_execution.v1.GetProvisionInfoRequest)
pub struct GetProvisionInfoRequest {
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.fn_execution.v1.GetProvisionInfoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetProvisionInfoRequest {
    fn default() -> &'a GetProvisionInfoRequest {
        <GetProvisionInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetProvisionInfoRequest {
    pub fn new() -> GetProvisionInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetProvisionInfoRequest>(
            "GetProvisionInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetProvisionInfoRequest {
    const NAME: &'static str = "GetProvisionInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetProvisionInfoRequest {
        GetProvisionInfoRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetProvisionInfoRequest {
        static instance: GetProvisionInfoRequest = GetProvisionInfoRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetProvisionInfoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetProvisionInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetProvisionInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProvisionInfoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.fn_execution.v1.GetProvisionInfoResponse)
pub struct GetProvisionInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.GetProvisionInfoResponse.info)
    pub info: ::protobuf::MessageField<ProvisionInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.fn_execution.v1.GetProvisionInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetProvisionInfoResponse {
    fn default() -> &'a GetProvisionInfoResponse {
        <GetProvisionInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetProvisionInfoResponse {
    pub fn new() -> GetProvisionInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProvisionInfo>(
            "info",
            |m: &GetProvisionInfoResponse| { &m.info },
            |m: &mut GetProvisionInfoResponse| { &mut m.info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetProvisionInfoResponse>(
            "GetProvisionInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetProvisionInfoResponse {
    const NAME: &'static str = "GetProvisionInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetProvisionInfoResponse {
        GetProvisionInfoResponse::new()
    }

    fn clear(&mut self) {
        self.info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetProvisionInfoResponse {
        static instance: GetProvisionInfoResponse = GetProvisionInfoResponse {
            info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetProvisionInfoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetProvisionInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetProvisionInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProvisionInfoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.fn_execution.v1.ProvisionInfo)
pub struct ProvisionInfo {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.pipeline_options)
    pub pipeline_options: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.retrieval_token)
    pub retrieval_token: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.status_endpoint)
    pub status_endpoint: ::protobuf::MessageField<super::endpoints::ApiServiceDescriptor>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.logging_endpoint)
    pub logging_endpoint: ::protobuf::MessageField<super::endpoints::ApiServiceDescriptor>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.artifact_endpoint)
    pub artifact_endpoint: ::protobuf::MessageField<super::endpoints::ApiServiceDescriptor>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.control_endpoint)
    pub control_endpoint: ::protobuf::MessageField<super::endpoints::ApiServiceDescriptor>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.dependencies)
    pub dependencies: ::std::vec::Vec<super::beam_runner_api::ArtifactInformation>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.runner_capabilities)
    pub runner_capabilities: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.metadata)
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.sibling_worker_ids)
    pub sibling_worker_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.fn_execution.v1.ProvisionInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProvisionInfo {
    fn default() -> &'a ProvisionInfo {
        <ProvisionInfo as ::protobuf::Message>::default_instance()
    }
}

impl ProvisionInfo {
    pub fn new() -> ProvisionInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "pipeline_options",
            |m: &ProvisionInfo| { &m.pipeline_options },
            |m: &mut ProvisionInfo| { &mut m.pipeline_options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retrieval_token",
            |m: &ProvisionInfo| { &m.retrieval_token },
            |m: &mut ProvisionInfo| { &mut m.retrieval_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::endpoints::ApiServiceDescriptor>(
            "status_endpoint",
            |m: &ProvisionInfo| { &m.status_endpoint },
            |m: &mut ProvisionInfo| { &mut m.status_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::endpoints::ApiServiceDescriptor>(
            "logging_endpoint",
            |m: &ProvisionInfo| { &m.logging_endpoint },
            |m: &mut ProvisionInfo| { &mut m.logging_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::endpoints::ApiServiceDescriptor>(
            "artifact_endpoint",
            |m: &ProvisionInfo| { &m.artifact_endpoint },
            |m: &mut ProvisionInfo| { &mut m.artifact_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::endpoints::ApiServiceDescriptor>(
            "control_endpoint",
            |m: &ProvisionInfo| { &m.control_endpoint },
            |m: &mut ProvisionInfo| { &mut m.control_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dependencies",
            |m: &ProvisionInfo| { &m.dependencies },
            |m: &mut ProvisionInfo| { &mut m.dependencies },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "runner_capabilities",
            |m: &ProvisionInfo| { &m.runner_capabilities },
            |m: &mut ProvisionInfo| { &mut m.runner_capabilities },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "metadata",
            |m: &ProvisionInfo| { &m.metadata },
            |m: &mut ProvisionInfo| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sibling_worker_ids",
            |m: &ProvisionInfo| { &m.sibling_worker_ids },
            |m: &mut ProvisionInfo| { &mut m.sibling_worker_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProvisionInfo>(
            "ProvisionInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProvisionInfo {
    const NAME: &'static str = "ProvisionInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline_options)?;
                },
                50 => {
                    self.retrieval_token = is.read_string()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status_endpoint)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.logging_endpoint)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.artifact_endpoint)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.control_endpoint)?;
                },
                90 => {
                    self.dependencies.push(is.read_message()?);
                },
                98 => {
                    self.runner_capabilities.push(is.read_string()?);
                },
                106 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.metadata.insert(key, value);
                },
                114 => {
                    self.sibling_worker_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.retrieval_token.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.retrieval_token);
        }
        if let Some(v) = self.status_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.logging_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.artifact_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.control_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.runner_capabilities {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.sibling_worker_ids {
            my_size += ::protobuf::rt::string_size(14, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline_options.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.retrieval_token.is_empty() {
            os.write_string(6, &self.retrieval_token)?;
        }
        if let Some(v) = self.status_endpoint.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.logging_endpoint.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.artifact_endpoint.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.control_endpoint.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        for v in &self.dependencies {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        };
        for v in &self.runner_capabilities {
            os.write_string(12, &v)?;
        };
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(106)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.sibling_worker_ids {
            os.write_string(14, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProvisionInfo {
        ProvisionInfo::new()
    }

    fn clear(&mut self) {
        self.pipeline_options.clear();
        self.retrieval_token.clear();
        self.status_endpoint.clear();
        self.logging_endpoint.clear();
        self.artifact_endpoint.clear();
        self.control_endpoint.clear();
        self.dependencies.clear();
        self.runner_capabilities.clear();
        self.metadata.clear();
        self.sibling_worker_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProvisionInfo {
        static instance: ::protobuf::rt::Lazy<ProvisionInfo> = ::protobuf::rt::Lazy::new();
        instance.get(ProvisionInfo::new)
    }
}

impl ::protobuf::MessageFull for ProvisionInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProvisionInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProvisionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProvisionInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n>org/apache/beam/model/fn_execution/v1/beam_provision_api.proto\x12%or\
    g.apache.beam.model.fn_execution.v1\x1a7org/apache/beam/model/pipeline/v\
    1/beam_runner_api.proto\x1a1org/apache/beam/model/pipeline/v1/endpoints.\
    proto\x1a\x1cgoogle/protobuf/struct.proto\"\x19\n\x17GetProvisionInfoReq\
    uest\"d\n\x18GetProvisionInfoResponse\x12H\n\x04info\x18\x01\x20\x01(\
    \x0b24.org.apache.beam.model.fn_execution.v1.ProvisionInfoR\x04info\"\
    \xe4\x06\n\rProvisionInfo\x12B\n\x10pipeline_options\x18\x03\x20\x01(\
    \x0b2\x17.google.protobuf.StructR\x0fpipelineOptions\x12'\n\x0fretrieval\
    _token\x18\x06\x20\x01(\tR\x0eretrievalToken\x12`\n\x0fstatus_endpoint\
    \x18\x07\x20\x01(\x0b27.org.apache.beam.model.pipeline.v1.ApiServiceDesc\
    riptorR\x0estatusEndpoint\x12b\n\x10logging_endpoint\x18\x08\x20\x01(\
    \x0b27.org.apache.beam.model.pipeline.v1.ApiServiceDescriptorR\x0floggin\
    gEndpoint\x12d\n\x11artifact_endpoint\x18\t\x20\x01(\x0b27.org.apache.be\
    am.model.pipeline.v1.ApiServiceDescriptorR\x10artifactEndpoint\x12b\n\
    \x10control_endpoint\x18\n\x20\x01(\x0b27.org.apache.beam.model.pipeline\
    .v1.ApiServiceDescriptorR\x0fcontrolEndpoint\x12Z\n\x0cdependencies\x18\
    \x0b\x20\x03(\x0b26.org.apache.beam.model.pipeline.v1.ArtifactInformatio\
    nR\x0cdependencies\x12/\n\x13runner_capabilities\x18\x0c\x20\x03(\tR\x12\
    runnerCapabilities\x12^\n\x08metadata\x18\r\x20\x03(\x0b2B.org.apache.be\
    am.model.fn_execution.v1.ProvisionInfo.MetadataEntryR\x08metadata\x12,\n\
    \x12sibling_worker_ids\x18\x0e\x20\x03(\tR\x10siblingWorkerIds\x1a;\n\rM\
    etadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05va\
    lue\x18\x02\x20\x01(\tR\x05value:\x028\x012\xa8\x01\n\x10ProvisionServic\
    e\x12\x93\x01\n\x10GetProvisionInfo\x12>.org.apache.beam.model.fn_execut\
    ion.v1.GetProvisionInfoRequest\x1a?.org.apache.beam.model.fn_execution.v\
    1.GetProvisionInfoResponseB\x84\x01\n$org.apache.beam.model.fnexecution.\
    v1B\x0cProvisionApiZNgithub.com/apache/beam/sdks/v2/go/pkg/beam/model/fn\
    execution_v1;fnexecution_v1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::beam_runner_api::file_descriptor().clone());
            deps.push(super::endpoints::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(GetProvisionInfoRequest::generated_message_descriptor_data());
            messages.push(GetProvisionInfoResponse::generated_message_descriptor_data());
            messages.push(ProvisionInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
