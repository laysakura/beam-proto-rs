// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc 3.21.5
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `org/apache/beam/model/job_management/v1/beam_job_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.PrepareJobRequest)
pub struct PrepareJobRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PrepareJobRequest.pipeline)
    pub pipeline: ::protobuf::MessageField<super::beam_runner_api::Pipeline>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PrepareJobRequest.pipeline_options)
    pub pipeline_options: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PrepareJobRequest.job_name)
    pub job_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.PrepareJobRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrepareJobRequest {
    fn default() -> &'a PrepareJobRequest {
        <PrepareJobRequest as ::protobuf::Message>::default_instance()
    }
}

impl PrepareJobRequest {
    pub fn new() -> PrepareJobRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::beam_runner_api::Pipeline>(
            "pipeline",
            |m: &PrepareJobRequest| { &m.pipeline },
            |m: &mut PrepareJobRequest| { &mut m.pipeline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "pipeline_options",
            |m: &PrepareJobRequest| { &m.pipeline_options },
            |m: &mut PrepareJobRequest| { &mut m.pipeline_options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_name",
            |m: &PrepareJobRequest| { &m.job_name },
            |m: &mut PrepareJobRequest| { &mut m.job_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrepareJobRequest>(
            "PrepareJobRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrepareJobRequest {
    const NAME: &'static str = "PrepareJobRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline_options)?;
                },
                26 => {
                    self.job_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pipeline_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.job_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.job_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.pipeline_options.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.job_name.is_empty() {
            os.write_string(3, &self.job_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrepareJobRequest {
        PrepareJobRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.pipeline_options.clear();
        self.job_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrepareJobRequest {
        static instance: PrepareJobRequest = PrepareJobRequest {
            pipeline: ::protobuf::MessageField::none(),
            pipeline_options: ::protobuf::MessageField::none(),
            job_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrepareJobRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrepareJobRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrepareJobRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrepareJobRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.PrepareJobResponse)
pub struct PrepareJobResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PrepareJobResponse.preparation_id)
    pub preparation_id: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PrepareJobResponse.artifact_staging_endpoint)
    pub artifact_staging_endpoint: ::protobuf::MessageField<super::endpoints::ApiServiceDescriptor>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PrepareJobResponse.staging_session_token)
    pub staging_session_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.PrepareJobResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PrepareJobResponse {
    fn default() -> &'a PrepareJobResponse {
        <PrepareJobResponse as ::protobuf::Message>::default_instance()
    }
}

impl PrepareJobResponse {
    pub fn new() -> PrepareJobResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "preparation_id",
            |m: &PrepareJobResponse| { &m.preparation_id },
            |m: &mut PrepareJobResponse| { &mut m.preparation_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::endpoints::ApiServiceDescriptor>(
            "artifact_staging_endpoint",
            |m: &PrepareJobResponse| { &m.artifact_staging_endpoint },
            |m: &mut PrepareJobResponse| { &mut m.artifact_staging_endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "staging_session_token",
            |m: &PrepareJobResponse| { &m.staging_session_token },
            |m: &mut PrepareJobResponse| { &mut m.staging_session_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PrepareJobResponse>(
            "PrepareJobResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PrepareJobResponse {
    const NAME: &'static str = "PrepareJobResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.preparation_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.artifact_staging_endpoint)?;
                },
                26 => {
                    self.staging_session_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.preparation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.preparation_id);
        }
        if let Some(v) = self.artifact_staging_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.staging_session_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.staging_session_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.preparation_id.is_empty() {
            os.write_string(1, &self.preparation_id)?;
        }
        if let Some(v) = self.artifact_staging_endpoint.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.staging_session_token.is_empty() {
            os.write_string(3, &self.staging_session_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PrepareJobResponse {
        PrepareJobResponse::new()
    }

    fn clear(&mut self) {
        self.preparation_id.clear();
        self.artifact_staging_endpoint.clear();
        self.staging_session_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PrepareJobResponse {
        static instance: PrepareJobResponse = PrepareJobResponse {
            preparation_id: ::std::string::String::new(),
            artifact_staging_endpoint: ::protobuf::MessageField::none(),
            staging_session_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PrepareJobResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PrepareJobResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PrepareJobResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrepareJobResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.RunJobRequest)
pub struct RunJobRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.RunJobRequest.preparation_id)
    pub preparation_id: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.RunJobRequest.retrieval_token)
    pub retrieval_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.RunJobRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RunJobRequest {
    fn default() -> &'a RunJobRequest {
        <RunJobRequest as ::protobuf::Message>::default_instance()
    }
}

impl RunJobRequest {
    pub fn new() -> RunJobRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "preparation_id",
            |m: &RunJobRequest| { &m.preparation_id },
            |m: &mut RunJobRequest| { &mut m.preparation_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "retrieval_token",
            |m: &RunJobRequest| { &m.retrieval_token },
            |m: &mut RunJobRequest| { &mut m.retrieval_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RunJobRequest>(
            "RunJobRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RunJobRequest {
    const NAME: &'static str = "RunJobRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.preparation_id = is.read_string()?;
                },
                18 => {
                    self.retrieval_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.preparation_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.preparation_id);
        }
        if !self.retrieval_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.retrieval_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.preparation_id.is_empty() {
            os.write_string(1, &self.preparation_id)?;
        }
        if !self.retrieval_token.is_empty() {
            os.write_string(2, &self.retrieval_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RunJobRequest {
        RunJobRequest::new()
    }

    fn clear(&mut self) {
        self.preparation_id.clear();
        self.retrieval_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RunJobRequest {
        static instance: RunJobRequest = RunJobRequest {
            preparation_id: ::std::string::String::new(),
            retrieval_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RunJobRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RunJobRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RunJobRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunJobRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.RunJobResponse)
pub struct RunJobResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.RunJobResponse.job_id)
    pub job_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.RunJobResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RunJobResponse {
    fn default() -> &'a RunJobResponse {
        <RunJobResponse as ::protobuf::Message>::default_instance()
    }
}

impl RunJobResponse {
    pub fn new() -> RunJobResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &RunJobResponse| { &m.job_id },
            |m: &mut RunJobResponse| { &mut m.job_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RunJobResponse>(
            "RunJobResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RunJobResponse {
    const NAME: &'static str = "RunJobResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RunJobResponse {
        RunJobResponse::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RunJobResponse {
        static instance: RunJobResponse = RunJobResponse {
            job_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RunJobResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RunJobResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RunJobResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunJobResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.CancelJobRequest)
pub struct CancelJobRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.CancelJobRequest.job_id)
    pub job_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.CancelJobRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CancelJobRequest {
    fn default() -> &'a CancelJobRequest {
        <CancelJobRequest as ::protobuf::Message>::default_instance()
    }
}

impl CancelJobRequest {
    pub fn new() -> CancelJobRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &CancelJobRequest| { &m.job_id },
            |m: &mut CancelJobRequest| { &mut m.job_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CancelJobRequest>(
            "CancelJobRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CancelJobRequest {
    const NAME: &'static str = "CancelJobRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CancelJobRequest {
        CancelJobRequest::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CancelJobRequest {
        static instance: CancelJobRequest = CancelJobRequest {
            job_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CancelJobRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CancelJobRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CancelJobRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelJobRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.CancelJobResponse)
pub struct CancelJobResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.CancelJobResponse.state)
    pub state: ::protobuf::EnumOrUnknown<job_state::Enum>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.CancelJobResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CancelJobResponse {
    fn default() -> &'a CancelJobResponse {
        <CancelJobResponse as ::protobuf::Message>::default_instance()
    }
}

impl CancelJobResponse {
    pub fn new() -> CancelJobResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &CancelJobResponse| { &m.state },
            |m: &mut CancelJobResponse| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CancelJobResponse>(
            "CancelJobResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CancelJobResponse {
    const NAME: &'static str = "CancelJobResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CancelJobResponse {
        CancelJobResponse::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CancelJobResponse {
        static instance: CancelJobResponse = CancelJobResponse {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CancelJobResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CancelJobResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CancelJobResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelJobResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.JobInfo)
pub struct JobInfo {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobInfo.job_id)
    pub job_id: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobInfo.job_name)
    pub job_name: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobInfo.pipeline_options)
    pub pipeline_options: ::protobuf::MessageField<::protobuf::well_known_types::struct_::Struct>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobInfo.state)
    pub state: ::protobuf::EnumOrUnknown<job_state::Enum>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.JobInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobInfo {
    fn default() -> &'a JobInfo {
        <JobInfo as ::protobuf::Message>::default_instance()
    }
}

impl JobInfo {
    pub fn new() -> JobInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &JobInfo| { &m.job_id },
            |m: &mut JobInfo| { &mut m.job_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_name",
            |m: &JobInfo| { &m.job_name },
            |m: &mut JobInfo| { &mut m.job_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::struct_::Struct>(
            "pipeline_options",
            |m: &JobInfo| { &m.pipeline_options },
            |m: &mut JobInfo| { &mut m.pipeline_options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &JobInfo| { &m.state },
            |m: &mut JobInfo| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobInfo>(
            "JobInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobInfo {
    const NAME: &'static str = "JobInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                18 => {
                    self.job_name = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline_options)?;
                },
                32 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        if !self.job_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.job_name);
        }
        if let Some(v) = self.pipeline_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(4, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        if !self.job_name.is_empty() {
            os.write_string(2, &self.job_name)?;
        }
        if let Some(v) = self.pipeline_options.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobInfo {
        JobInfo::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.job_name.clear();
        self.pipeline_options.clear();
        self.state = ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobInfo {
        static instance: JobInfo = JobInfo {
            job_id: ::std::string::String::new(),
            job_name: ::std::string::String::new(),
            pipeline_options: ::protobuf::MessageField::none(),
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobsRequest)
pub struct GetJobsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobsRequest {
    fn default() -> &'a GetJobsRequest {
        <GetJobsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetJobsRequest {
    pub fn new() -> GetJobsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobsRequest>(
            "GetJobsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobsRequest {
    const NAME: &'static str = "GetJobsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobsRequest {
        GetJobsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobsRequest {
        static instance: GetJobsRequest = GetJobsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobsResponse)
pub struct GetJobsResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.GetJobsResponse.job_info)
    pub job_info: ::std::vec::Vec<JobInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobsResponse {
    fn default() -> &'a GetJobsResponse {
        <GetJobsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetJobsResponse {
    pub fn new() -> GetJobsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "job_info",
            |m: &GetJobsResponse| { &m.job_info },
            |m: &mut GetJobsResponse| { &mut m.job_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobsResponse>(
            "GetJobsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobsResponse {
    const NAME: &'static str = "GetJobsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_info.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.job_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.job_info {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobsResponse {
        GetJobsResponse::new()
    }

    fn clear(&mut self) {
        self.job_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobsResponse {
        static instance: GetJobsResponse = GetJobsResponse {
            job_info: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobStateRequest)
pub struct GetJobStateRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.GetJobStateRequest.job_id)
    pub job_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobStateRequest {
    fn default() -> &'a GetJobStateRequest {
        <GetJobStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetJobStateRequest {
    pub fn new() -> GetJobStateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &GetJobStateRequest| { &m.job_id },
            |m: &mut GetJobStateRequest| { &mut m.job_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobStateRequest>(
            "GetJobStateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobStateRequest {
    const NAME: &'static str = "GetJobStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobStateRequest {
        GetJobStateRequest::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobStateRequest {
        static instance: GetJobStateRequest = GetJobStateRequest {
            job_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobStateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobStateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobStateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.JobStateEvent)
pub struct JobStateEvent {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobStateEvent.state)
    pub state: ::protobuf::EnumOrUnknown<job_state::Enum>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobStateEvent.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.JobStateEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobStateEvent {
    fn default() -> &'a JobStateEvent {
        <JobStateEvent as ::protobuf::Message>::default_instance()
    }
}

impl JobStateEvent {
    pub fn new() -> JobStateEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &JobStateEvent| { &m.state },
            |m: &mut JobStateEvent| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &JobStateEvent| { &m.timestamp },
            |m: &mut JobStateEvent| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobStateEvent>(
            "JobStateEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobStateEvent {
    const NAME: &'static str = "JobStateEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobStateEvent {
        JobStateEvent::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(job_state::Enum::UNSPECIFIED);
        self.timestamp.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobStateEvent {
        static instance: JobStateEvent = JobStateEvent {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            timestamp: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobStateEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobStateEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobStateEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobStateEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobPipelineRequest)
pub struct GetJobPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.GetJobPipelineRequest.job_id)
    pub job_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobPipelineRequest {
    fn default() -> &'a GetJobPipelineRequest {
        <GetJobPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetJobPipelineRequest {
    pub fn new() -> GetJobPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &GetJobPipelineRequest| { &m.job_id },
            |m: &mut GetJobPipelineRequest| { &mut m.job_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobPipelineRequest>(
            "GetJobPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobPipelineRequest {
    const NAME: &'static str = "GetJobPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobPipelineRequest {
        GetJobPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobPipelineRequest {
        static instance: GetJobPipelineRequest = GetJobPipelineRequest {
            job_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobPipelineResponse)
pub struct GetJobPipelineResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.GetJobPipelineResponse.pipeline)
    pub pipeline: ::protobuf::MessageField<super::beam_runner_api::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobPipelineResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobPipelineResponse {
    fn default() -> &'a GetJobPipelineResponse {
        <GetJobPipelineResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetJobPipelineResponse {
    pub fn new() -> GetJobPipelineResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::beam_runner_api::Pipeline>(
            "pipeline",
            |m: &GetJobPipelineResponse| { &m.pipeline },
            |m: &mut GetJobPipelineResponse| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobPipelineResponse>(
            "GetJobPipelineResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobPipelineResponse {
    const NAME: &'static str = "GetJobPipelineResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobPipelineResponse {
        GetJobPipelineResponse::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobPipelineResponse {
        static instance: GetJobPipelineResponse = GetJobPipelineResponse {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobPipelineResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobPipelineResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobPipelineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobPipelineResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.JobMessagesRequest)
pub struct JobMessagesRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobMessagesRequest.job_id)
    pub job_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.JobMessagesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobMessagesRequest {
    fn default() -> &'a JobMessagesRequest {
        <JobMessagesRequest as ::protobuf::Message>::default_instance()
    }
}

impl JobMessagesRequest {
    pub fn new() -> JobMessagesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &JobMessagesRequest| { &m.job_id },
            |m: &mut JobMessagesRequest| { &mut m.job_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobMessagesRequest>(
            "JobMessagesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobMessagesRequest {
    const NAME: &'static str = "JobMessagesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobMessagesRequest {
        JobMessagesRequest::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobMessagesRequest {
        static instance: JobMessagesRequest = JobMessagesRequest {
            job_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobMessagesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobMessagesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobMessagesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobMessagesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.JobMessage)
pub struct JobMessage {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobMessage.message_id)
    pub message_id: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobMessage.time)
    pub time: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobMessage.importance)
    pub importance: ::protobuf::EnumOrUnknown<job_message::MessageImportance>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.JobMessage.message_text)
    pub message_text: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.JobMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobMessage {
    fn default() -> &'a JobMessage {
        <JobMessage as ::protobuf::Message>::default_instance()
    }
}

impl JobMessage {
    pub fn new() -> JobMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_id",
            |m: &JobMessage| { &m.message_id },
            |m: &mut JobMessage| { &mut m.message_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &JobMessage| { &m.time },
            |m: &mut JobMessage| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "importance",
            |m: &JobMessage| { &m.importance },
            |m: &mut JobMessage| { &mut m.importance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_text",
            |m: &JobMessage| { &m.message_text },
            |m: &mut JobMessage| { &mut m.message_text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobMessage>(
            "JobMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobMessage {
    const NAME: &'static str = "JobMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message_id = is.read_string()?;
                },
                18 => {
                    self.time = is.read_string()?;
                },
                24 => {
                    self.importance = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.message_text = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message_id);
        }
        if !self.time.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.time);
        }
        if self.importance != ::protobuf::EnumOrUnknown::new(job_message::MessageImportance::MESSAGE_IMPORTANCE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(3, self.importance.value());
        }
        if !self.message_text.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.message_text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message_id.is_empty() {
            os.write_string(1, &self.message_id)?;
        }
        if !self.time.is_empty() {
            os.write_string(2, &self.time)?;
        }
        if self.importance != ::protobuf::EnumOrUnknown::new(job_message::MessageImportance::MESSAGE_IMPORTANCE_UNSPECIFIED) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.importance))?;
        }
        if !self.message_text.is_empty() {
            os.write_string(4, &self.message_text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobMessage {
        JobMessage::new()
    }

    fn clear(&mut self) {
        self.message_id.clear();
        self.time.clear();
        self.importance = ::protobuf::EnumOrUnknown::new(job_message::MessageImportance::MESSAGE_IMPORTANCE_UNSPECIFIED);
        self.message_text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobMessage {
        static instance: JobMessage = JobMessage {
            message_id: ::std::string::String::new(),
            time: ::std::string::String::new(),
            importance: ::protobuf::EnumOrUnknown::from_i32(0),
            message_text: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JobMessage`
pub mod job_message {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance)
    pub enum MessageImportance {
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance.MESSAGE_IMPORTANCE_UNSPECIFIED)
        MESSAGE_IMPORTANCE_UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance.JOB_MESSAGE_DEBUG)
        JOB_MESSAGE_DEBUG = 1,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance.JOB_MESSAGE_DETAILED)
        JOB_MESSAGE_DETAILED = 2,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance.JOB_MESSAGE_BASIC)
        JOB_MESSAGE_BASIC = 3,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance.JOB_MESSAGE_WARNING)
        JOB_MESSAGE_WARNING = 4,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobMessage.MessageImportance.JOB_MESSAGE_ERROR)
        JOB_MESSAGE_ERROR = 5,
    }

    impl ::protobuf::Enum for MessageImportance {
        const NAME: &'static str = "MessageImportance";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MessageImportance> {
            match value {
                0 => ::std::option::Option::Some(MessageImportance::MESSAGE_IMPORTANCE_UNSPECIFIED),
                1 => ::std::option::Option::Some(MessageImportance::JOB_MESSAGE_DEBUG),
                2 => ::std::option::Option::Some(MessageImportance::JOB_MESSAGE_DETAILED),
                3 => ::std::option::Option::Some(MessageImportance::JOB_MESSAGE_BASIC),
                4 => ::std::option::Option::Some(MessageImportance::JOB_MESSAGE_WARNING),
                5 => ::std::option::Option::Some(MessageImportance::JOB_MESSAGE_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MessageImportance] = &[
            MessageImportance::MESSAGE_IMPORTANCE_UNSPECIFIED,
            MessageImportance::JOB_MESSAGE_DEBUG,
            MessageImportance::JOB_MESSAGE_DETAILED,
            MessageImportance::JOB_MESSAGE_BASIC,
            MessageImportance::JOB_MESSAGE_WARNING,
            MessageImportance::JOB_MESSAGE_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for MessageImportance {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("JobMessage.MessageImportance").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MessageImportance {
        fn default() -> Self {
            MessageImportance::MESSAGE_IMPORTANCE_UNSPECIFIED
        }
    }

    impl MessageImportance {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MessageImportance>("JobMessage.MessageImportance")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.JobMessagesResponse)
pub struct JobMessagesResponse {
    // message oneof groups
    pub response: ::std::option::Option<job_messages_response::Response>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.JobMessagesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobMessagesResponse {
    fn default() -> &'a JobMessagesResponse {
        <JobMessagesResponse as ::protobuf::Message>::default_instance()
    }
}

impl JobMessagesResponse {
    pub fn new() -> JobMessagesResponse {
        ::std::default::Default::default()
    }

    // .org.apache.beam.model.job_management.v1.JobMessage message_response = 1;

    pub fn message_response(&self) -> &JobMessage {
        match self.response {
            ::std::option::Option::Some(job_messages_response::Response::MessageResponse(ref v)) => v,
            _ => <JobMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_message_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_message_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(job_messages_response::Response::MessageResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message_response(&mut self, v: JobMessage) {
        self.response = ::std::option::Option::Some(job_messages_response::Response::MessageResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message_response(&mut self) -> &mut JobMessage {
        if let ::std::option::Option::Some(job_messages_response::Response::MessageResponse(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(job_messages_response::Response::MessageResponse(JobMessage::new()));
        }
        match self.response {
            ::std::option::Option::Some(job_messages_response::Response::MessageResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message_response(&mut self) -> JobMessage {
        if self.has_message_response() {
            match self.response.take() {
                ::std::option::Option::Some(job_messages_response::Response::MessageResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            JobMessage::new()
        }
    }

    // .org.apache.beam.model.job_management.v1.JobStateEvent state_response = 2;

    pub fn state_response(&self) -> &JobStateEvent {
        match self.response {
            ::std::option::Option::Some(job_messages_response::Response::StateResponse(ref v)) => v,
            _ => <JobStateEvent as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_state_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_state_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(job_messages_response::Response::StateResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_state_response(&mut self, v: JobStateEvent) {
        self.response = ::std::option::Option::Some(job_messages_response::Response::StateResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_state_response(&mut self) -> &mut JobStateEvent {
        if let ::std::option::Option::Some(job_messages_response::Response::StateResponse(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(job_messages_response::Response::StateResponse(JobStateEvent::new()));
        }
        match self.response {
            ::std::option::Option::Some(job_messages_response::Response::StateResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_state_response(&mut self) -> JobStateEvent {
        if self.has_state_response() {
            match self.response.take() {
                ::std::option::Option::Some(job_messages_response::Response::StateResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            JobStateEvent::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, JobMessage>(
            "message_response",
            JobMessagesResponse::has_message_response,
            JobMessagesResponse::message_response,
            JobMessagesResponse::mut_message_response,
            JobMessagesResponse::set_message_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, JobStateEvent>(
            "state_response",
            JobMessagesResponse::has_state_response,
            JobMessagesResponse::state_response,
            JobMessagesResponse::mut_state_response,
            JobMessagesResponse::set_state_response,
        ));
        oneofs.push(job_messages_response::Response::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobMessagesResponse>(
            "JobMessagesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobMessagesResponse {
    const NAME: &'static str = "JobMessagesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.response = ::std::option::Option::Some(job_messages_response::Response::MessageResponse(is.read_message()?));
                },
                18 => {
                    self.response = ::std::option::Option::Some(job_messages_response::Response::StateResponse(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &job_messages_response::Response::MessageResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &job_messages_response::Response::StateResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &job_messages_response::Response::MessageResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &job_messages_response::Response::StateResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobMessagesResponse {
        JobMessagesResponse::new()
    }

    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobMessagesResponse {
        static instance: JobMessagesResponse = JobMessagesResponse {
            response: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobMessagesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobMessagesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobMessagesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobMessagesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JobMessagesResponse`
pub mod job_messages_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:org.apache.beam.model.job_management.v1.JobMessagesResponse.response)
    pub enum Response {
        // @@protoc_insertion_point(oneof_field:org.apache.beam.model.job_management.v1.JobMessagesResponse.message_response)
        MessageResponse(super::JobMessage),
        // @@protoc_insertion_point(oneof_field:org.apache.beam.model.job_management.v1.JobMessagesResponse.state_response)
        StateResponse(super::JobStateEvent),
    }

    impl ::protobuf::Oneof for Response {
    }

    impl ::protobuf::OneofFull for Response {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::JobMessagesResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("response").unwrap()).clone()
        }
    }

    impl Response {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response>("response")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.JobState)
pub struct JobState {
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.JobState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JobState {
    fn default() -> &'a JobState {
        <JobState as ::protobuf::Message>::default_instance()
    }
}

impl JobState {
    pub fn new() -> JobState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JobState>(
            "JobState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JobState {
    const NAME: &'static str = "JobState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JobState {
        JobState::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JobState {
        static instance: JobState = JobState {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JobState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JobState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JobState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `JobState`
pub mod job_state {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:org.apache.beam.model.job_management.v1.JobState.Enum)
    pub enum Enum {
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.UNSPECIFIED)
        UNSPECIFIED = 0,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.STOPPED)
        STOPPED = 1,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.RUNNING)
        RUNNING = 2,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.DONE)
        DONE = 3,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.FAILED)
        FAILED = 4,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.CANCELLED)
        CANCELLED = 5,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.UPDATED)
        UPDATED = 6,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.DRAINING)
        DRAINING = 7,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.DRAINED)
        DRAINED = 8,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.STARTING)
        STARTING = 9,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.CANCELLING)
        CANCELLING = 10,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.JobState.Enum.UPDATING)
        UPDATING = 11,
    }

    impl ::protobuf::Enum for Enum {
        const NAME: &'static str = "Enum";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Enum> {
            match value {
                0 => ::std::option::Option::Some(Enum::UNSPECIFIED),
                1 => ::std::option::Option::Some(Enum::STOPPED),
                2 => ::std::option::Option::Some(Enum::RUNNING),
                3 => ::std::option::Option::Some(Enum::DONE),
                4 => ::std::option::Option::Some(Enum::FAILED),
                5 => ::std::option::Option::Some(Enum::CANCELLED),
                6 => ::std::option::Option::Some(Enum::UPDATED),
                7 => ::std::option::Option::Some(Enum::DRAINING),
                8 => ::std::option::Option::Some(Enum::DRAINED),
                9 => ::std::option::Option::Some(Enum::STARTING),
                10 => ::std::option::Option::Some(Enum::CANCELLING),
                11 => ::std::option::Option::Some(Enum::UPDATING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Enum] = &[
            Enum::UNSPECIFIED,
            Enum::STOPPED,
            Enum::RUNNING,
            Enum::DONE,
            Enum::FAILED,
            Enum::CANCELLED,
            Enum::UPDATED,
            Enum::DRAINING,
            Enum::DRAINED,
            Enum::STARTING,
            Enum::CANCELLING,
            Enum::UPDATING,
        ];
    }

    impl ::protobuf::EnumFull for Enum {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("JobState.Enum").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Enum {
        fn default() -> Self {
            Enum::UNSPECIFIED
        }
    }

    impl Enum {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Enum>("JobState.Enum")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobMetricsRequest)
pub struct GetJobMetricsRequest {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.GetJobMetricsRequest.job_id)
    pub job_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobMetricsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobMetricsRequest {
    fn default() -> &'a GetJobMetricsRequest {
        <GetJobMetricsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetJobMetricsRequest {
    pub fn new() -> GetJobMetricsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "job_id",
            |m: &GetJobMetricsRequest| { &m.job_id },
            |m: &mut GetJobMetricsRequest| { &mut m.job_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobMetricsRequest>(
            "GetJobMetricsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobMetricsRequest {
    const NAME: &'static str = "GetJobMetricsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.job_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.job_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.job_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.job_id.is_empty() {
            os.write_string(1, &self.job_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobMetricsRequest {
        GetJobMetricsRequest::new()
    }

    fn clear(&mut self) {
        self.job_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobMetricsRequest {
        static instance: GetJobMetricsRequest = GetJobMetricsRequest {
            job_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobMetricsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobMetricsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobMetricsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobMetricsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.GetJobMetricsResponse)
pub struct GetJobMetricsResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.GetJobMetricsResponse.metrics)
    pub metrics: ::protobuf::MessageField<MetricResults>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.GetJobMetricsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetJobMetricsResponse {
    fn default() -> &'a GetJobMetricsResponse {
        <GetJobMetricsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetJobMetricsResponse {
    pub fn new() -> GetJobMetricsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetricResults>(
            "metrics",
            |m: &GetJobMetricsResponse| { &m.metrics },
            |m: &mut GetJobMetricsResponse| { &mut m.metrics },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetJobMetricsResponse>(
            "GetJobMetricsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetJobMetricsResponse {
    const NAME: &'static str = "GetJobMetricsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metrics)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metrics.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metrics.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetJobMetricsResponse {
        GetJobMetricsResponse::new()
    }

    fn clear(&mut self) {
        self.metrics.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetJobMetricsResponse {
        static instance: GetJobMetricsResponse = GetJobMetricsResponse {
            metrics: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetJobMetricsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetJobMetricsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetJobMetricsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetJobMetricsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.MetricResults)
pub struct MetricResults {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.MetricResults.attempted)
    pub attempted: ::std::vec::Vec<super::metrics::MonitoringInfo>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.MetricResults.committed)
    pub committed: ::std::vec::Vec<super::metrics::MonitoringInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.MetricResults.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricResults {
    fn default() -> &'a MetricResults {
        <MetricResults as ::protobuf::Message>::default_instance()
    }
}

impl MetricResults {
    pub fn new() -> MetricResults {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attempted",
            |m: &MetricResults| { &m.attempted },
            |m: &mut MetricResults| { &mut m.attempted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "committed",
            |m: &MetricResults| { &m.committed },
            |m: &mut MetricResults| { &mut m.committed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricResults>(
            "MetricResults",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricResults {
    const NAME: &'static str = "MetricResults";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.attempted.push(is.read_message()?);
                },
                18 => {
                    self.committed.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.attempted {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.committed {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.attempted {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.committed {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricResults {
        MetricResults::new()
    }

    fn clear(&mut self) {
        self.attempted.clear();
        self.committed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricResults {
        static instance: MetricResults = MetricResults {
            attempted: ::std::vec::Vec::new(),
            committed: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricResults {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricResults").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricResults {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricResults {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.DescribePipelineOptionsRequest)
pub struct DescribePipelineOptionsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.DescribePipelineOptionsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DescribePipelineOptionsRequest {
    fn default() -> &'a DescribePipelineOptionsRequest {
        <DescribePipelineOptionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl DescribePipelineOptionsRequest {
    pub fn new() -> DescribePipelineOptionsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DescribePipelineOptionsRequest>(
            "DescribePipelineOptionsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DescribePipelineOptionsRequest {
    const NAME: &'static str = "DescribePipelineOptionsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DescribePipelineOptionsRequest {
        DescribePipelineOptionsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DescribePipelineOptionsRequest {
        static instance: DescribePipelineOptionsRequest = DescribePipelineOptionsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DescribePipelineOptionsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DescribePipelineOptionsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DescribePipelineOptionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DescribePipelineOptionsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.PipelineOptionType)
pub struct PipelineOptionType {
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.PipelineOptionType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineOptionType {
    fn default() -> &'a PipelineOptionType {
        <PipelineOptionType as ::protobuf::Message>::default_instance()
    }
}

impl PipelineOptionType {
    pub fn new() -> PipelineOptionType {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineOptionType>(
            "PipelineOptionType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineOptionType {
    const NAME: &'static str = "PipelineOptionType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineOptionType {
        PipelineOptionType::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineOptionType {
        static instance: PipelineOptionType = PipelineOptionType {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineOptionType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineOptionType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineOptionType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineOptionType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PipelineOptionType`
pub mod pipeline_option_type {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum)
    pub enum Enum {
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum.STRING)
        STRING = 0,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum.BOOLEAN)
        BOOLEAN = 1,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum.INTEGER)
        INTEGER = 2,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum.NUMBER)
        NUMBER = 3,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum.ARRAY)
        ARRAY = 4,
        // @@protoc_insertion_point(enum_value:org.apache.beam.model.job_management.v1.PipelineOptionType.Enum.OBJECT)
        OBJECT = 5,
    }

    impl ::protobuf::Enum for Enum {
        const NAME: &'static str = "Enum";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Enum> {
            match value {
                0 => ::std::option::Option::Some(Enum::STRING),
                1 => ::std::option::Option::Some(Enum::BOOLEAN),
                2 => ::std::option::Option::Some(Enum::INTEGER),
                3 => ::std::option::Option::Some(Enum::NUMBER),
                4 => ::std::option::Option::Some(Enum::ARRAY),
                5 => ::std::option::Option::Some(Enum::OBJECT),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Enum] = &[
            Enum::STRING,
            Enum::BOOLEAN,
            Enum::INTEGER,
            Enum::NUMBER,
            Enum::ARRAY,
            Enum::OBJECT,
        ];
    }

    impl ::protobuf::EnumFull for Enum {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("PipelineOptionType.Enum").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Enum {
        fn default() -> Self {
            Enum::STRING
        }
    }

    impl Enum {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Enum>("PipelineOptionType.Enum")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor)
pub struct PipelineOptionDescriptor {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor.type)
    pub type_: ::protobuf::EnumOrUnknown<pipeline_option_type::Enum>,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor.default_value)
    pub default_value: ::std::string::String,
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor.group)
    pub group: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.PipelineOptionDescriptor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineOptionDescriptor {
    fn default() -> &'a PipelineOptionDescriptor {
        <PipelineOptionDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl PipelineOptionDescriptor {
    pub fn new() -> PipelineOptionDescriptor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PipelineOptionDescriptor| { &m.name },
            |m: &mut PipelineOptionDescriptor| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &PipelineOptionDescriptor| { &m.type_ },
            |m: &mut PipelineOptionDescriptor| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &PipelineOptionDescriptor| { &m.description },
            |m: &mut PipelineOptionDescriptor| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "default_value",
            |m: &PipelineOptionDescriptor| { &m.default_value },
            |m: &mut PipelineOptionDescriptor| { &mut m.default_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group",
            |m: &PipelineOptionDescriptor| { &m.group },
            |m: &mut PipelineOptionDescriptor| { &mut m.group },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineOptionDescriptor>(
            "PipelineOptionDescriptor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineOptionDescriptor {
    const NAME: &'static str = "PipelineOptionDescriptor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.default_value = is.read_string()?;
                },
                42 => {
                    self.group = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(pipeline_option_type::Enum::STRING) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.default_value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.default_value);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.group);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(pipeline_option_type::Enum::STRING) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.default_value.is_empty() {
            os.write_string(4, &self.default_value)?;
        }
        if !self.group.is_empty() {
            os.write_string(5, &self.group)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineOptionDescriptor {
        PipelineOptionDescriptor::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(pipeline_option_type::Enum::STRING);
        self.description.clear();
        self.default_value.clear();
        self.group.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineOptionDescriptor {
        static instance: PipelineOptionDescriptor = PipelineOptionDescriptor {
            name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            description: ::std::string::String::new(),
            default_value: ::std::string::String::new(),
            group: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineOptionDescriptor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineOptionDescriptor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineOptionDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineOptionDescriptor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:org.apache.beam.model.job_management.v1.DescribePipelineOptionsResponse)
pub struct DescribePipelineOptionsResponse {
    // message fields
    // @@protoc_insertion_point(field:org.apache.beam.model.job_management.v1.DescribePipelineOptionsResponse.options)
    pub options: ::std::vec::Vec<PipelineOptionDescriptor>,
    // special fields
    // @@protoc_insertion_point(special_field:org.apache.beam.model.job_management.v1.DescribePipelineOptionsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DescribePipelineOptionsResponse {
    fn default() -> &'a DescribePipelineOptionsResponse {
        <DescribePipelineOptionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl DescribePipelineOptionsResponse {
    pub fn new() -> DescribePipelineOptionsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &DescribePipelineOptionsResponse| { &m.options },
            |m: &mut DescribePipelineOptionsResponse| { &mut m.options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DescribePipelineOptionsResponse>(
            "DescribePipelineOptionsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DescribePipelineOptionsResponse {
    const NAME: &'static str = "DescribePipelineOptionsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.options.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.options {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DescribePipelineOptionsResponse {
        DescribePipelineOptionsResponse::new()
    }

    fn clear(&mut self) {
        self.options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DescribePipelineOptionsResponse {
        static instance: DescribePipelineOptionsResponse = DescribePipelineOptionsResponse {
            options: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DescribePipelineOptionsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DescribePipelineOptionsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DescribePipelineOptionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DescribePipelineOptionsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:org/apache/beam/model/job_management/v1/beam_job_api.proto\x12'org.ap\
    ache.beam.model.job_management.v1\x1a7org/apache/beam/model/pipeline/v1/\
    beam_runner_api.proto\x1a1org/apache/beam/model/pipeline/v1/endpoints.pr\
    oto\x1a/org/apache/beam/model/pipeline/v1/metrics.proto\x1a\x1cgoogle/pr\
    otobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbb\x01\n\
    \x11PrepareJobRequest\x12G\n\x08pipeline\x18\x01\x20\x01(\x0b2+.org.apac\
    he.beam.model.pipeline.v1.PipelineR\x08pipeline\x12B\n\x10pipeline_optio\
    ns\x18\x02\x20\x01(\x0b2\x17.google.protobuf.StructR\x0fpipelineOptions\
    \x12\x19\n\x08job_name\x18\x03\x20\x01(\tR\x07jobName\"\xe4\x01\n\x12Pre\
    pareJobResponse\x12%\n\x0epreparation_id\x18\x01\x20\x01(\tR\rpreparatio\
    nId\x12s\n\x19artifact_staging_endpoint\x18\x02\x20\x01(\x0b27.org.apach\
    e.beam.model.pipeline.v1.ApiServiceDescriptorR\x17artifactStagingEndpoin\
    t\x122\n\x15staging_session_token\x18\x03\x20\x01(\tR\x13stagingSessionT\
    oken\"_\n\rRunJobRequest\x12%\n\x0epreparation_id\x18\x01\x20\x01(\tR\rp\
    reparationId\x12'\n\x0fretrieval_token\x18\x02\x20\x01(\tR\x0eretrievalT\
    oken\"'\n\x0eRunJobResponse\x12\x15\n\x06job_id\x18\x01\x20\x01(\tR\x05j\
    obId\")\n\x10CancelJobRequest\x12\x15\n\x06job_id\x18\x01\x20\x01(\tR\
    \x05jobId\"a\n\x11CancelJobResponse\x12L\n\x05state\x18\x01\x20\x01(\x0e\
    26.org.apache.beam.model.job_management.v1.JobState.EnumR\x05state\"\xcd\
    \x01\n\x07JobInfo\x12\x15\n\x06job_id\x18\x01\x20\x01(\tR\x05jobId\x12\
    \x19\n\x08job_name\x18\x02\x20\x01(\tR\x07jobName\x12B\n\x10pipeline_opt\
    ions\x18\x03\x20\x01(\x0b2\x17.google.protobuf.StructR\x0fpipelineOption\
    s\x12L\n\x05state\x18\x04\x20\x01(\x0e26.org.apache.beam.model.job_manag\
    ement.v1.JobState.EnumR\x05state\"\x10\n\x0eGetJobsRequest\"^\n\x0fGetJo\
    bsResponse\x12K\n\x08job_info\x18\x01\x20\x03(\x0b20.org.apache.beam.mod\
    el.job_management.v1.JobInfoR\x07jobInfo\"+\n\x12GetJobStateRequest\x12\
    \x15\n\x06job_id\x18\x01\x20\x01(\tR\x05jobId\"\x97\x01\n\rJobStateEvent\
    \x12L\n\x05state\x18\x01\x20\x01(\x0e26.org.apache.beam.model.job_manage\
    ment.v1.JobState.EnumR\x05state\x128\n\ttimestamp\x18\x02\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\ttimestamp\".\n\x15GetJobPipelineRequest\
    \x12\x15\n\x06job_id\x18\x01\x20\x01(\tR\x05jobId\"a\n\x16GetJobPipeline\
    Response\x12G\n\x08pipeline\x18\x01\x20\x01(\x0b2+.org.apache.beam.model\
    .pipeline.v1.PipelineR\x08pipeline\"+\n\x12JobMessagesRequest\x12\x15\n\
    \x06job_id\x18\x01\x20\x01(\tR\x05jobId\"\xfb\x02\n\nJobMessage\x12\x1d\
    \n\nmessage_id\x18\x01\x20\x01(\tR\tmessageId\x12\x12\n\x04time\x18\x02\
    \x20\x01(\tR\x04time\x12e\n\nimportance\x18\x03\x20\x01(\x0e2E.org.apach\
    e.beam.model.job_management.v1.JobMessage.MessageImportanceR\nimportance\
    \x12!\n\x0cmessage_text\x18\x04\x20\x01(\tR\x0bmessageText\"\xaf\x01\n\
    \x11MessageImportance\x12\"\n\x1eMESSAGE_IMPORTANCE_UNSPECIFIED\x10\0\
    \x12\x15\n\x11JOB_MESSAGE_DEBUG\x10\x01\x12\x18\n\x14JOB_MESSAGE_DETAILE\
    D\x10\x02\x12\x15\n\x11JOB_MESSAGE_BASIC\x10\x03\x12\x17\n\x13JOB_MESSAG\
    E_WARNING\x10\x04\x12\x15\n\x11JOB_MESSAGE_ERROR\x10\x05\"\xe4\x01\n\x13\
    JobMessagesResponse\x12`\n\x10message_response\x18\x01\x20\x01(\x0b23.or\
    g.apache.beam.model.job_management.v1.JobMessageH\0R\x0fmessageResponse\
    \x12_\n\x0estate_response\x18\x02\x20\x01(\x0b26.org.apache.beam.model.j\
    ob_management.v1.JobStateEventH\0R\rstateResponseB\n\n\x08response\"\xb7\
    \x01\n\x08JobState\"\xaa\x01\n\x04Enum\x12\x0f\n\x0bUNSPECIFIED\x10\0\
    \x12\x0b\n\x07STOPPED\x10\x01\x12\x0b\n\x07RUNNING\x10\x02\x12\x08\n\x04\
    DONE\x10\x03\x12\n\n\x06FAILED\x10\x04\x12\r\n\tCANCELLED\x10\x05\x12\
    \x0b\n\x07UPDATED\x10\x06\x12\x0c\n\x08DRAINING\x10\x07\x12\x0b\n\x07DRA\
    INED\x10\x08\x12\x0c\n\x08STARTING\x10\t\x12\x0e\n\nCANCELLING\x10\n\x12\
    \x0c\n\x08UPDATING\x10\x0b\"-\n\x14GetJobMetricsRequest\x12\x15\n\x06job\
    _id\x18\x01\x20\x01(\tR\x05jobId\"i\n\x15GetJobMetricsResponse\x12P\n\
    \x07metrics\x18\x01\x20\x01(\x0b26.org.apache.beam.model.job_management.\
    v1.MetricResultsR\x07metrics\"\xb1\x01\n\rMetricResults\x12O\n\tattempte\
    d\x18\x01\x20\x03(\x0b21.org.apache.beam.model.pipeline.v1.MonitoringInf\
    oR\tattempted\x12O\n\tcommitted\x18\x02\x20\x03(\x0b21.org.apache.beam.m\
    odel.pipeline.v1.MonitoringInfoR\tcommitted\"\x20\n\x1eDescribePipelineO\
    ptionsRequest\"e\n\x12PipelineOptionType\"O\n\x04Enum\x12\n\n\x06STRING\
    \x10\0\x12\x0b\n\x07BOOLEAN\x10\x01\x12\x0b\n\x07INTEGER\x10\x02\x12\n\n\
    \x06NUMBER\x10\x03\x12\t\n\x05ARRAY\x10\x04\x12\n\n\x06OBJECT\x10\x05\"\
    \xe1\x01\n\x18PipelineOptionDescriptor\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12T\n\x04type\x18\x02\x20\x01(\x0e2@.org.apache.beam.model\
    .job_management.v1.PipelineOptionType.EnumR\x04type\x12\x20\n\x0bdescrip\
    tion\x18\x03\x20\x01(\tR\x0bdescription\x12#\n\rdefault_value\x18\x04\
    \x20\x01(\tR\x0cdefaultValue\x12\x14\n\x05group\x18\x05\x20\x01(\tR\x05g\
    roup\"~\n\x1fDescribePipelineOptionsResponse\x12[\n\x07options\x18\x01\
    \x20\x03(\x0b2A.org.apache.beam.model.job_management.v1.PipelineOptionDe\
    scriptorR\x07options2\xf6\n\n\nJobService\x12\x82\x01\n\x07Prepare\x12:.\
    org.apache.beam.model.job_management.v1.PrepareJobRequest\x1a;.org.apach\
    e.beam.model.job_management.v1.PrepareJobResponse\x12v\n\x03Run\x126.org\
    .apache.beam.model.job_management.v1.RunJobRequest\x1a7.org.apache.beam.\
    model.job_management.v1.RunJobResponse\x12|\n\x07GetJobs\x127.org.apache\
    .beam.model.job_management.v1.GetJobsRequest\x1a8.org.apache.beam.model.\
    job_management.v1.GetJobsResponse\x12\x7f\n\x08GetState\x12;.org.apache.\
    beam.model.job_management.v1.GetJobStateRequest\x1a6.org.apache.beam.mod\
    el.job_management.v1.JobStateEvent\x12\x8e\x01\n\x0bGetPipeline\x12>.org\
    .apache.beam.model.job_management.v1.GetJobPipelineRequest\x1a?.org.apac\
    he.beam.model.job_management.v1.GetJobPipelineResponse\x12\x7f\n\x06Canc\
    el\x129.org.apache.beam.model.job_management.v1.CancelJobRequest\x1a:.or\
    g.apache.beam.model.job_management.v1.CancelJobResponse\x12\x87\x01\n\
    \x0eGetStateStream\x12;.org.apache.beam.model.job_management.v1.GetJobSt\
    ateRequest\x1a6.org.apache.beam.model.job_management.v1.JobStateEvent0\
    \x01\x12\x8f\x01\n\x10GetMessageStream\x12;.org.apache.beam.model.job_ma\
    nagement.v1.JobMessagesRequest\x1a<.org.apache.beam.model.job_management\
    .v1.JobMessagesResponse0\x01\x12\x8e\x01\n\rGetJobMetrics\x12=.org.apach\
    e.beam.model.job_management.v1.GetJobMetricsRequest\x1a>.org.apache.beam\
    .model.job_management.v1.GetJobMetricsResponse\x12\xac\x01\n\x17Describe\
    PipelineOptions\x12G.org.apache.beam.model.job_management.v1.DescribePip\
    elineOptionsRequest\x1aH.org.apache.beam.model.job_management.v1.Describ\
    ePipelineOptionsResponseB\x84\x01\n&org.apache.beam.model.jobmanagement.\
    v1B\x06JobApiZRgithub.com/apache/beam/sdks/v2/go/pkg/beam/model/jobmanag\
    ement_v1;jobmanagement_v1b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::beam_runner_api::file_descriptor().clone());
            deps.push(super::endpoints::file_descriptor().clone());
            deps.push(super::metrics::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::struct_::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(24);
            messages.push(PrepareJobRequest::generated_message_descriptor_data());
            messages.push(PrepareJobResponse::generated_message_descriptor_data());
            messages.push(RunJobRequest::generated_message_descriptor_data());
            messages.push(RunJobResponse::generated_message_descriptor_data());
            messages.push(CancelJobRequest::generated_message_descriptor_data());
            messages.push(CancelJobResponse::generated_message_descriptor_data());
            messages.push(JobInfo::generated_message_descriptor_data());
            messages.push(GetJobsRequest::generated_message_descriptor_data());
            messages.push(GetJobsResponse::generated_message_descriptor_data());
            messages.push(GetJobStateRequest::generated_message_descriptor_data());
            messages.push(JobStateEvent::generated_message_descriptor_data());
            messages.push(GetJobPipelineRequest::generated_message_descriptor_data());
            messages.push(GetJobPipelineResponse::generated_message_descriptor_data());
            messages.push(JobMessagesRequest::generated_message_descriptor_data());
            messages.push(JobMessage::generated_message_descriptor_data());
            messages.push(JobMessagesResponse::generated_message_descriptor_data());
            messages.push(JobState::generated_message_descriptor_data());
            messages.push(GetJobMetricsRequest::generated_message_descriptor_data());
            messages.push(GetJobMetricsResponse::generated_message_descriptor_data());
            messages.push(MetricResults::generated_message_descriptor_data());
            messages.push(DescribePipelineOptionsRequest::generated_message_descriptor_data());
            messages.push(PipelineOptionType::generated_message_descriptor_data());
            messages.push(PipelineOptionDescriptor::generated_message_descriptor_data());
            messages.push(DescribePipelineOptionsResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(job_message::MessageImportance::generated_enum_descriptor_data());
            enums.push(job_state::Enum::generated_enum_descriptor_data());
            enums.push(pipeline_option_type::Enum::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
